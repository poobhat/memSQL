/*
There are three options for loading data into MemSQL. MemSQL Helios supports options 2 and 3. 
To use option 3 with MemSQL Helios, use the admin endpoint.

Option 1: Loading from a file
Option 2: Streaming data using MemSQL Pipelines.
Option 3: Loading from MySQL

*/
________________________________________________________________________________________________________________________________

/*

Bulding Stock trade database

CREATE DATABASE IF NOT EXISTS trades;
USE trades;

DROP TABLE IF EXISTS trade;
CREATE TABLE trade(
  id BIGINT NOT NULL, 
  stock_symbol CHAR(5) NOT NULL,
  shares DECIMAL(18,4) NOT NULL,
  share_price DECIMAL(18,4) NOT NULL,
  trade_time DATETIME(6) NOT NULL,
  KEY(stock_symbol) USING CLUSTERED COLUMNSTORE,
  SHARD KEY(stock_symbol)
);

DROP TABLE IF EXISTS company;
CREATE TABLE company(
  symbol CHAR(5) NOT NULL,
  name VARCHAR(50),
  last_sale VARCHAR(10),
  market_cap VARCHAR(15),
  IPO_year INT,
  sector VARCHAR(80),
  industry VARCHAR(80),
  summary_quote VARCHAR(50),
  extra VARCHAR(50)
);

Copy file from local to memSQL container

docker cp /Users/a212584156/Box\ Sync/Documents/FDL/memSQL/trades\ database/companylist.csv memsql-ciab:/home/memsql/trades

LOAD DATA INFILE '/home/memsql/trades/companylist.csv' INTO TABLE company FIELDS TERMINATED BY ',' ENCLOSED BY '"' LINES TERMINATED BY '\r\n' IGNORE 1 LINES;

----
Create data generator functionality

The following are several functions used to generate data. The utility function, marketcap_to_DECIMAL, is used by the 
" seed_trades stored procedure " to convert a string value for the market capitalization of a stock into a decimal value.

DELIMITER //
CREATE OR REPLACE FUNCTION marketcap_to_DECIMAL(s VARCHAR(15)) 
  RETURNS DECIMAL(18,2) AS
DECLARE 
  m CHAR(1) = SUBSTR(s, LENGTH(s), 1); -- M or B
  raw_v DECIMAL(18,2) = SUBSTR(s, 2, LENGTH(s) - 2);
  v DECIMAL(18,2) = NULL;
BEGIN
  IF m = "B" THEN 
    v = raw_v * 1E9;
  ELSE
    v = raw_v;
  END IF;
  RETURN v;
END //
DELIMITER ;


SELECT symbol, marketcap_to_DECIMAL(market_cap), rank() OVER (ORDER BY marketcap_to_DECIMAL(market_cap)) AS _rank
    FROM company
    ORDER BY _rank desc LIMIT 200;

SELECT symbol, marketcap_to_DECIMAL(last_sale)
    FROM company where last_sale <> 'n/a'
    ORDER BY marketcap_to_DECIMAL(last_sale) desc LIMIT 20;
